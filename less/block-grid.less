/*
Block grids
 ===========

Block grids give you a way to evenly split its child elements within x columns.
You can resize your browser (or use the buttons in the doc) to see what happens

*inspired on http://foundation.zurb.com/docs/components/block_grid.html*

## Usage
`.grid-<BREAKPOINT>-<COLUMNS>`

`<breakpoint>`
-  xs = small spartphones
-  sm = tablets
-  md = small desktop
-  lg = large desktop

`<columns>`
-  1-12 = number of columns


    <div class="grid-xs-2 grid-sm-3 grid-md-4 grid-lg-5">
         <div class="cell"> <div class="well">1</div> </div>
         <div class="cell"> <div class="well">2</div> </div>
         <div class="cell"> <div class="well">3</div> </div>
         <div class="cell"> <div class="well">4</div> </div>
         <div class="cell"> <div class="well">5</div> </div>
         <div class="cell"> <div class="well">6</div> </div>
         <div class="cell"> <div class="well">7</div> </div>
         <div class="cell"> <div class="well">8</div> </div>
         <div class="cell"> <div class="well">9</div> </div>
    </div>

*/

    // xs sm md lg
.grid-xs-1,
.grid-xs-2,
.grid-xs-3,
.grid-xs-4,
.grid-xs-5,
.grid-xs-6,
.grid-xs-7,
.grid-xs-8,
.grid-xs-9,
.grid-xs-10,
.grid-xs-11,
.grid-xs-12,
.grid-sm-1,
.grid-sm-2,
.grid-sm-3,
.grid-sm-4,
.grid-sm-5,
.grid-sm-6,
.grid-sm-7,
.grid-sm-8,
.grid-sm-9,
.grid-sm-10,
.grid-sm-11,
.grid-sm-12,
.grid-md-1,
.grid-md-2,
.grid-md-3,
.grid-md-4,
.grid-md-5,
.grid-md-6,
.grid-md-7,
.grid-md-8,
.grid-md-9,
.grid-md-10,
.grid-md-11,
.grid-md-12,
.grid-lg-1,
.grid-lg-2,
.grid-lg-3,
.grid-lg-4,
.grid-lg-5,
.grid-lg-6,
.grid-lg-7,
.grid-lg-8,
.grid-lg-9,
.grid-lg-10,
.grid-lg-11,
.grid-lg-12{
	
	.make-row();

	> .cell{
		position: relative;
		// Prevent columns from collapsing when empty
		min-height: 1px;
		// Inner gutter via padding
		padding-left:  (@grid-gutter-width / 2);
		padding-right: (@grid-gutter-width / 2);
	}
}

    // Extra small grid
    //
    // Grid classes for extra small devices like smartphones. No offset, push, or
    // pull classes are present here due to the size of the target.
    //

    //.grid-xs-1,
.grid-xs-2,
.grid-xs-3,
.grid-xs-4,
.grid-xs-5,
.grid-xs-6,
.grid-xs-7,
.grid-xs-8,
.grid-xs-9,
.grid-xs-10,
.grid-xs-11,
.grid-xs-12{
	> .cell{
		float: left;
	}
}

.grid-xs-1 > .cell{
	width: percentage(1 / 1);
	&:nth-of-type(n) 	{ clear: none; }
	&:nth-of-type(1n+1) { clear: both; }
}
.grid-xs-2 > .cell{
	width: percentage(1 / 2);
	&:nth-of-type(n) 	{ clear: none; }
	&:nth-of-type(2n+1) { clear: both; }
}
.grid-xs-3 > .cell{
	width: percentage(1 / 3);
	&:nth-of-type(n) 	{ clear: none; }
	&:nth-of-type(3n+1) { clear: both; }
}
.grid-xs-4 > .cell{
	width: percentage(1 / 4);
	&:nth-of-type(n) 	{ clear: none; }
	&:nth-of-type(4n+1) { clear: both; }
}
.grid-xs-5 > .cell{
	width: percentage(1 / 5);
	&:nth-of-type(n) 	{ clear: none; }
	&:nth-of-type(5n+1) { clear: both; }
}
.grid-xs-6 > .cell{
	width: percentage(1 / 6);
	&:nth-of-type(n) 	{ clear: none; }
	&:nth-of-type(6n+1) { clear: both; }
}
.grid-xs-7 > .cell{
	width: percentage(1 / 7);
	&:nth-of-type(n) 	{ clear: none; }
	&:nth-of-type(7n+1) { clear: both; }
}
.grid-xs-8 > .cell{
	width: percentage(1 / 8);
	&:nth-of-type(n) 	{ clear: none; }
	&:nth-of-type(8n+1) { clear: both; }
}
.grid-xs-9 > .cell{
	width: percentage(1 / 9);
	&:nth-of-type(n) 	{ clear: none; }
	&:nth-of-type(9n+1) { clear: both; }
}
.grid-xs-10 > .cell{
	width: percentage(1 / 10);
	&:nth-of-type(n) 	{ clear: none; }
	&:nth-of-type(10n+1) { clear: both; }
}
.grid-xs-11 > .cell{
	width: percentage(1 / 11);
	&:nth-of-type(n) 	{ clear: none; }
	&:nth-of-type(11n+1) { clear: both; }
}
.grid-xs-12 > .cell{
	width: percentage(1 / 12);
	&:nth-of-type(n) 	{ clear: none; }
	&:nth-of-type(12n+1) { clear: both; }
}

    // Small grid
    //
    // Columns, offsets, pushes, and pulls for the small device range, from phones
    // to tablets.
    //
@media (min-width: @screen-sm-min) {

	//.grid-sm-1,
	.grid-sm-2,
	.grid-sm-3,
	.grid-sm-4,
	.grid-sm-5,
	.grid-sm-6,
	.grid-sm-7,
	.grid-sm-8,
	.grid-sm-9,
	.grid-sm-10,
	.grid-sm-11,
	.grid-sm-12{
		> .cell{
			float: left;
		}
	}

	.grid-sm-1 > .cell{
		width: percentage(1 / 1);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(1n+1) { clear: both; }
	}
	.grid-sm-2 > .cell{
		width: percentage(1 / 2);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(2n+1) { clear: both; }
	}
	.grid-sm-3 > .cell{
		width: percentage(1 / 3);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(3n+1) { clear: both; }
	}
	.grid-sm-4 > .cell{
		width: percentage(1 / 4);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(4n+1) { clear: both; }
	}
	.grid-sm-5 > .cell{
		width: percentage(1 / 5);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(5n+1) { clear: both; }
	}
	.grid-sm-6 > .cell{
		width: percentage(1 / 6);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(6n+1) { clear: both; }
	}
	.grid-sm-7 > .cell{
		width: percentage(1 / 7);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(7n+1) { clear: both; }
	}
	.grid-sm-8 > .cell{
		width: percentage(1 / 8);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(8n+1) { clear: both; }
	}
	.grid-sm-9 > .cell{
		width: percentage(1 / 9);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(9n+1) { clear: both; }
	}
	.grid-sm-10 > .cell{
		width: percentage(1 / 10);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(10n+1) { clear: both; }
	}
	.grid-sm-11 > .cell{
		width: percentage(1 / 11);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(11n+1) { clear: both; }
	}
	.grid-sm-12 > .cell{
		width: percentage(1 / 12);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(12n+1) { clear: both; }
	}

}


    // Medium grid
    //
    // Columns, offsets, pushes, and pulls for the desktop device range.
    //
@media (min-width: @screen-md-min) {
	//.grid-md-1,
	.grid-md-2,
	.grid-md-3,
	.grid-md-4,
	.grid-md-5,
	.grid-md-6,
	.grid-md-7,
	.grid-md-8,
	.grid-md-9,
	.grid-md-10,
	.grid-md-11,
	.grid-md-12{
		> .cell{
			float: left;
		}
	}

	.grid-md-1 > .cell{
		width: percentage(1 / 1);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(1n+1) { clear: both; }
	}
	.grid-md-2 > .cell{
		width: percentage(1 / 2);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(2n+1) { clear: both; }
	}
	.grid-md-3 > .cell{
		width: percentage(1 / 3);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(3n+1) { clear: both; }
	}
	.grid-md-4 > .cell{
		width: percentage(1 / 4);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(4n+1) { clear: both; }
	}
	.grid-md-5 > .cell{
		width: percentage(1 / 5);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(5n+1) { clear: both; }
	}
	.grid-md-6 > .cell{
		width: percentage(1 / 6);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(6n+1) { clear: both; }
	}
	.grid-md-7 > .cell{
		width: percentage(1 / 7);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(7n+1) { clear: both; }
	}
	.grid-md-8 > .cell{
		width: percentage(1 / 8);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(8n+1) { clear: both; }
	}
	.grid-md-9 > .cell{
		width: percentage(1 / 9);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(9n+1) { clear: both; }
	}
	.grid-md-10 > .cell{
		width: percentage(1 / 10);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(10n+1) { clear: both; }
	}
	.grid-md-11 > .cell{
		width: percentage(1 / 11);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(11n+1) { clear: both; }
	}
	.grid-md-12 > .cell{
		width: percentage(1 / 12);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(12n+1) { clear: both; }
	}
}


    // Large grid
    //
    // Columns, offsets, pushes, and pulls for the large desktop device range.
    //
    // Note that `.cell-lg-12` doesn't get floated on purpose--there's no need since
    // it's full-width.

@media (min-width: @screen-lg-min) {
	//.grid-lg-1,
	.grid-lg-2,
	.grid-lg-3,
	.grid-lg-4,
	.grid-lg-5,
	.grid-lg-6,
	.grid-lg-7,
	.grid-lg-8,
	.grid-lg-9,
	.grid-lg-10,
	.grid-lg-11,
	.grid-lg-12{
		> .cell{
			float: left;
		}
	}

	.grid-lg-1 > .cell{
		width: percentage(1 / 1);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(1n+1) { clear: both; }
	}
	.grid-lg-2 > .cell{
		width: percentage(1 / 2);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(2n+1) { clear: both; }
	}
	.grid-lg-3 > .cell{
		width: percentage(1 / 3);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(3n+1) { clear: both; }
	}
	.grid-lg-4 > .cell{
		width: percentage(1 / 4);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(4n+1) { clear: both; }
	}
	.grid-lg-5 > .cell{
		width: percentage(1 / 5);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(5n+1) { clear: both; }
	}
	.grid-lg-6 > .cell{
		width: percentage(1 / 6);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(6n+1) { clear: both; }
	}
	.grid-lg-7 > .cell{
		width: percentage(1 / 7);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(7n+1) { clear: both; }
	}
	.grid-lg-8 > .cell{
		width: percentage(1 / 8);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(8n+1) { clear: both; }
	}
	.grid-lg-9 > .cell{
		width: percentage(1 / 9);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(9n+1) { clear: both; }
	}
	.grid-lg-10 > .cell{
		width: percentage(1 / 10);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(10n+1) { clear: both; }
	}
	.grid-lg-11 > .cell{
		width: percentage(1 / 11);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(11n+1) { clear: both; }
	}
	.grid-lg-12 > .cell{
		width: percentage(1 / 12);
		&:nth-of-type(n) 	{ clear: none; }
		&:nth-of-type(12n+1) { clear: both; }
	}
}
